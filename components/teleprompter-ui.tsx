"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/9lZOzRaXSf4
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Button } from "@/components/ui/button";
import {
  SelectValue,
  SelectTrigger,
  SelectItem,
  SelectContent,
  Select,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";

import { useRef, useEffect, useState } from "react";

export function TeleprompterUI() {
  const displayItem = useRef(null);
  const scrollAmount = useRef(0);
  const isPaused = useRef(true);
  // const [isPaused,setIsPaused] = useState(false);
  const [isPausedState, setIsPausedState] = useState(true);
  const [speed, setSpeed] = useState(1);

  const [text, setText] = useState(`speech draft for Utype introduction video

  We are building a "DALL-E" for Chinese logotypes and typefaces, a generative solution helping designers to get beautiful letterings and logos based on their use scenarios. 
  
  Chinese typefaces are expensive, since there are more characters to design than any other languages, hence resulting in super high design cost, making them unaffordable for many graphic designers. Our solution, Utype, is a game-changer, providing a generative AI solution, that creates letterings and logos on demand, eliminating the need for a full, costly typeface license.
  
  Generating accurate texts has long been a headache for generative AI, an issue that becomes even harder for the complex Chinese characters. But with our expertise, we are overcoming the problem and making the creation of Chinese texts and logos more accessible than ever.
  
  Before we dive into the nuts and bolts of Utype, allow me to demonstrate its magic with a practical example. Here's a City promoting post for Hangzhou city I've been working on. I want to find the ideal title font that reads 美丽杭州, which is Beautiful Hangzhou in Chinese. 
  
  As you can see, we simply enter 美丽杭州to spark the creation of new, exclusive typefaces designed just for this occasion. Next, we describe the style we're after and finesse the type shape using a user-friendly slider. Now, let's watch the generation process unfold. And voilà! We have four distinct logotypes, each with unique finesse and detailing.
  
  For our post's title, we can amplify the flair of these logotypes with an array of built-in effects ready to be applied. This one catches my eye, but the color scheme doesn't quite suit my post. No problem at all. With a few adjustments in the panel, I can tweak the colors of the font, outline, and shadow. I'm drawn to this particular design, so let’s select and download it.
  All it takes next is to open my Figma file, drag and drop the chosen logotype, scale it to the perfect size, and... it's complete!
  
  Now, it's your turn to bring your designs to life. Utype is not just a tool; it's creativity at your fingertips. I'm eagerly anticipating the cascade of brilliant posts and designs you all will share. With Utype, the possibilities are endless. Let the creativity commence!
  
  `);

  useEffect(() => {
    

  }, []);
  const handleScroll = () => {
    if (!isPaused.current && displayItem.current !== null) {
      scrollAmount.current += speed;
      (displayItem.current as HTMLElement).scrollTo(0, scrollAmount.current);

      if (
        scrollAmount.current <
        (displayItem.current as HTMLElement).scrollHeight
      ) {
        requestAnimationFrame(handleScroll);
      }
    } else if (isPaused.current) {
      // Do nothing when paused
    } else {
      console.error("Element not found");
    }
  };

  const pauseScroll = () => {
    isPaused.current = true;
    setIsPausedState(true);
  };

  const resumeScroll = () => {
    isPaused.current = false;
    setIsPausedState(false);
    requestAnimationFrame(handleScroll);
  };

  return (
    <div key="1" className="h-full flex flex-col bg-gray-900 text-white">
      <header className="bg-gray-800 p-4 flex flex-grow-0 items-center justify-between">
        <h1 className="text-2xl font-bold">Teleprompter</h1>
        <div className="flex items-center gap-4">
          <Button size="icon" variant="ghost">
            <GaugeIcon className="w-6 h-6" />
            <span className="sr-only">Settings</span>
          </Button>
          <Button size="icon" variant="ghost">
            <SunIcon className="w-6 h-6" />
            <span className="sr-only">Toggle theme</span>
          </Button>
        </div>
      </header>
      <main className="p-3 flex flex-col gap-2  h-full">
        <div className="grid grid-cols-2 gap-2 row-span-2">
          <div className="bg-gray-800 rounded-lg p-2 flex items-center gap-4">
            <ClockIcon className="w-4 h-4" />
            <span className="text-sm font-bold">00:45</span>
            <div className="flex items-center gap-2 ml-auto">
              {isPausedState ? (
                <Button onClick={resumeScroll}>
                  <span>Play</span>
                </Button>
              ) : (
                <Button onClick={pauseScroll}>
                  <span>Pause</span>
                </Button>
              )}
            </div>
          </div>
          <div className="bg-gray-800 rounded-lg p-2 flex items-center gap-4">
            <TextIcon className="w-4 h-4" />
            <Select defaultValue="100">
              <SelectTrigger>
                <SelectValue placeholder="100%" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="50">50%</SelectItem>
                <SelectItem value="75">75%</SelectItem>
                <SelectItem value="100">100%</SelectItem>
                <SelectItem value="125">125%</SelectItem>
                <SelectItem value="150">150%</SelectItem>
              </SelectContent>
            </Select>
            <div className="flex items-center gap-2 ml-auto">
              <TagsIcon className="w-4 h-4" />
              <Textarea
                className="flex-1 bg-gray-700 border-none focus:ring-0"
                placeholder="Add annotations..."
              />
            </div>
          </div>
        </div>

        <div
          id="displayItem"
          className="flex-1 flex  bg-gray-800 rounded-lg row-span-10"
        >
          <div className="h-full w-full flex items-center justify-center  overflow-scroll">
            <Textarea
              ref={displayItem}
              value={text}
              onChange={(e) => setText(e.target.value)}
              placeholder="please put your text"
              className="h-full w-full bg-black text-4xl font-bold leading-relaxed p-8 md:px-28"
            ></Textarea>
          </div>
        </div>
      </main>
    </div>
  );
}

function ClockIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <polyline points="12 6 12 12 16 14" />
    </svg>
  );
}

function GaugeIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m12 14 4-4" />
      <path d="M3.34 19a10 10 0 1 1 17.32 0" />
    </svg>
  );
}

function PauseIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect x="14" y="4" width="4" height="16" rx="1" />
      <rect x="6" y="4" width="4" height="16" rx="1" />
    </svg>
  );
}

function PlayIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="6 3 20 12 6 21 6 3" />
    </svg>
  );
}

function SunIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="4" />
      <path d="M12 2v2" />
      <path d="M12 20v2" />
      <path d="m4.93 4.93 1.41 1.41" />
      <path d="m17.66 17.66 1.41 1.41" />
      <path d="M2 12h2" />
      <path d="M20 12h2" />
      <path d="m6.34 17.66-1.41 1.41" />
      <path d="m19.07 4.93-1.41 1.41" />
    </svg>
  );
}

function TagsIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m15 5 6.3 6.3a2.4 2.4 0 0 1 0 3.4L17 19" />
      <path d="M9.586 5.586A2 2 0 0 0 8.172 5H3a1 1 0 0 0-1 1v5.172a2 2 0 0 0 .586 1.414L8.29 18.29a2.426 2.426 0 0 0 3.42 0l3.58-3.58a2.426 2.426 0 0 0 0-3.42z" />
      <circle cx="6.5" cy="9.5" r=".5" fill="currentColor" />
    </svg>
  );
}

function TextIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M17 6.1H3" />
      <path d="M21 12.1H3" />
      <path d="M15.1 18H3" />
    </svg>
  );
}

